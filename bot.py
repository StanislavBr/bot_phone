import logging
from aiogram import Bot, Dispatcher, executor, types
from function import generate_user_stats, format_numbers, get_current_date
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from sqlighter import SQLighter
import datetime
from keyboard import *
from zadarma import api
import asyncio
import ast

with open('active_account.txt', 'r') as file:
    api_data = file.read()

# kk = 'c978434c60ca068c586a' TEST
# ck = '392c3e4cddedb97f0ec8' TEST
kk = api_data.split('|')[0]
ck = api_data.split('|')[1]

api = api.ZadarmaAPI(key=f'{kk}', secret=f'{ck}')
db = SQLighter('db.db')
# bot = Bot(token="5753137797:AAGIAXOnCVImtGlSPELaQHPBdUk0T2wAbHk") TEST
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
# admin_id = [1158936386] TEST
errors = {'busy': '–ó–∞–Ω—è—Ç–æ', 'cancel': '–û—Ç–º–µ–Ω–µ–Ω', 'no answer': '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞', 'failed': '–ù–µ —É–¥–∞–ª—Å—è',
          'unallocated number': '–ù–æ–º–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}


chat_admins = -671959464


class AddAccount(StatesGroup):
    value = State()


@dp.message_handler(commands='stats')
async def _(message: types.Message):
    if message.chat.id in [chat_admins]:
        db.delete_last_stats(get_current_date())
        current_dates = datetime.datetime.now()
        text = f"üìù<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {current_dates.day}/{current_dates.month}</b>\n\n"
        for i in db.get_all_stats_data():
            text += f"üÜî - @{i[3]} (<code>{i[0]}</code>) <b>—Å–æ–≤–µ—Ä—à–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤ --- {i[1]}</b>\n\n"
        await message.reply(text, parse_mode='html')


@dp.message_handler(commands='admin')
async def _(message: types.Message):
    if message.from_user.id in admin_id:
        if db.check_user(message.from_user.id) is not None:
            await message.answer(
                "–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
                reply_markup=admin_service_key(),
                parse_mode='html'
            )
        else:
            await message.answer("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")


@dp.callback_query_handler(text_startswith='delete_acc')
async def _(query: types.CallbackQuery, state: FSMContext):
    data = query.data.split('|')
    db.delete_accounts(data[1])
    await bot.send_message(
        chat_id=query.from_user.id,
        text=f'–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!\n\n<code>{data[1]}\n{data[2]}</code>',
        parse_mode='html'
    )


@dp.callback_query_handler(text_startswith='set_account')
async def _(query: types.CallbackQuery, state: FSMContext):
    data = query.data.split('|')
    with open('active_account.txt', 'w', encoding='utf8') as file:
        file.write(f'{data[1]}|{data[2]}')
    await bot.delete_message(
        chat_id=query.from_user.id,
        message_id=query.message.message_id
    )
    await bot.send_message(
        chat_id=query.from_user.id,
        text='–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç:',
        reply_markup=accounts_keyboard()
    )


@dp.callback_query_handler(state='*', text_startswith='cancelling')
async def _(query: types.CallbackQuery, state: FSMContext):
    if db.check_user(query.message.from_user.id) is not None:
        await bot.send_message(
            chat_id=query.from_user.id,
            text='–û—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await query.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ')


@dp.callback_query_handler(text_startswith='add_account')
async def _(query: types.CallbackQuery, state: FSMContext):
    if query.from_user.id in admin_id:
        await query.message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n–ü—Ä–∏–º–µ—Ä: (key secret)",
            reply_markup=cancel_acc()
        )
        await AddAccount.value.set()


@dp.message_handler(state=AddAccount.value)
async def _(message: types.Message, state: FSMContext):
    if message.text in ['start', 'test']:
        await message.answer("No!")
    else:
        msg = message.text.split(' ')
        db.write_account(msg[0], msg[1])
        await message.answer(
            f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!\nkey = {msg[0]}\nsecret = {msg[1]}",
            reply_markup=admin_service_key()
        )
        await state.finish()


@dp.callback_query_handler(text_startswith='show_account')
async def _(query: types.CallbackQuery):
    if query.from_user.id in admin_id:
        await query.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ", reply_markup=accounts_keyboard())


@dp.message_handler(commands="start")
async def _(message: types.Message):
    print(message)
    if not db.user_exists(message.from_user.id):
        db.user_add(message.from_user.id)
    if datetime.datetime.now() < db.get_date_subs(message.from_user.id) or db.get_count_call(message.from_user.id) > 0:
        await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=keyboard_menu(message.from_user.id))
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                            reply_markup=keyboard_registration)


@dp.callback_query_handler(text='profile')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        if not db.user_exists(message.from_user.id):
            await message.message.answer(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {db.get_date_subs(message.from_user.id).strftime('%d.%m.%Y')}" + '\n' + f'–ö–æ–ª-–≤–æ –∑–≤–æ–Ω–∫–æ–≤: {db.get_count_call(message.from_user.id)}')
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.message_handler(commands='get_id')
async def _(message: types.Message):
    await message.reply(f'{message.chat.id}')


@dp.callback_query_handler(text='registr')
async def _(message: types.CallbackQuery):
    if datetime.datetime.now() < db.get_date_subs(message.from_user.id):
        pass
    else:
        db.update_logic(message.from_user.id, 'registr')
        await message.message.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏(–≤—Å–µ —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ)')


@dp.callback_query_handler(text='call')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        if datetime.datetime.now() < db.get_date_subs(message.from_user.id) or db.get_count_call(
            message.from_user.id) > 0:
            db.update_logic(message.from_user.id, 'phone_number')
            await message.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n +7999, 8999, 8-999',
                                         reply_markup=keyboard_back)
        else:
            await message.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=keyboard_registration)
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='back')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        db.update_logic(message.from_user.id, '')
        db.update_phone_number(message.from_user.id, '')
        await message.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                                     reply_markup=keyboard_menu(message.from_user.id))
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='add_subs')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        db.update_logic(message.from_user.id, 'add_subs')
        await message.message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboard_back)
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='del_subs')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        db.update_logic(message.from_user.id, 'del_subs')
        await message.message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=keyboard_back)
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='days')
async def _(message: types.CallbackQuery):
    if db.check_user(message.from_user.id) is not None:
        db.update_logic(message.from_user.id, f'days:{db.get_logic(message.from_user.id)}')
        await bot.delete_message(chat_id=chat_admins, message_id=message.message.message_id)
        await message.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π')
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='count_call')
async def _(message: types.CallbackQuery):
    if db.check_user(message.message.from_user.id) is not None:
        db.update_logic(message.from_user.id, f'call:{db.get_logic(message.from_user.id)}')
        await bot.delete_message(chat_id=chat_admins, message_id=message.message.message_id)
        await message.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∑–≤–æ–Ω–∫–æ–≤')
    else:
        await message.message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(text='add_files')
async def _(message: types.CallbackQuery):
    db.update_logic(message.from_user.id, 'add_files')
    await message.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ê–¢–° –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ |(–ü—Ä–∏–º–µ—Ä: 543|–ù–∞–¥–æ –ø–æ–π–º–∞—Ç—å —ç—Ç—É —Å—É–∫—É)',
                                 reply_markup=keyboard_back)


@dp.message_handler()
async def _(message: types.CallbackQuery):
    if db.get_logic(message.from_user.id) == 'registr':
        # await bot.send_message(-1001606427335, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(message.from_user.id) + '|@' + str(
        await bot.send_message(chat_admins, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(message.from_user.id) + '|@' + str(
            message.from_user.username) + '\n–¢–µ–∫—Å—Ç: ' + message.text, reply_markup=keyboard_anket(message.from_user.id))
        db.update_logic(message.from_user.id, '')
        await message.reply('–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∞–º, –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç!')
    elif 'days' in db.get_logic(message.from_user.id):
        uid = int(db.get_logic(message.from_user.id).split(':')[1])
        db.update_date_subs(uid, int(message.text))
        db.update_logic(message.from_user.id, '')
        await bot.send_message(uid, f'–í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {message.text} –¥–Ω–µ–π', reply_markup=keyboard_menu(uid))
        await message.reply('–í—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É!')
    elif 'call' in db.get_logic(message.from_user.id):
        uid = int(db.get_logic(message.from_user.id).split(':')[1])
        db.update_count_call(uid, int(message.text))
        db.update_logic(message.from_user.id, '')
        await bot.send_message(uid, f'–í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {message.text} –∑–≤–æ–Ω–∫–æ–≤', reply_markup=keyboard_menu(uid))
        await message.reply('–í—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É!')
    elif db.get_logic(message.from_user.id) == 'add_subs':
        db.update_logic(message.from_user.id, f'{message.text}')
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=keyboard_subs)
    elif db.get_logic(message.from_user.id) == 'del_subs':
        db.update_logic(message.from_user.id, '')
        db.update_date_subs(int(message.text))
        db.update_count_call(int(message.text), 0)
        await message.reply('–£–¥–∞–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
    elif db.get_logic(message.from_user.id) == 'phone_number':
        if datetime.datetime.now() < db.get_date_subs(message.from_user.id) or db.get_count_call(
                message.from_user.id) > 0:
            db.update_logic(message.from_user.id, 'file')
            db.update_phone_number(message.from_user.id, format_numbers(message.text))
            await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω', reply_markup=keyboard_files())
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=keyboard_registration)
    elif db.get_logic(message.from_user.id) == 'add_files':
        number = message.text.split('|')[0]
        name = message.text.split('|')[1]
        db.add_file(number, name)
        await message.answer('–£—Å–ø–µ—à–Ω–æ!')


@dp.callback_query_handler()
async def _(message: types.CallbackQuery):
    if 'success' in message.data:
        user_id = message.data.split(':')[1]
        db.update_logic(message.from_user.id, f'{user_id}')
        await bot.delete_message(chat_id=chat_admins, message_id=message.message.message_id)
        await message.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=keyboard_subs)
    elif 'fail' in message.data:
        user_id = int(message.data.split(':')[1])
        await bot.send_message(user_id, '–í–∞—à–∞ –∑–∞—è–≤–∫—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
        await bot.delete_message(chat_id=chat_admins, message_id=message.message.message_id)
        await message.message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–∞–∑!')
    elif db.get_logic(message.from_user.id) == 'file':
        db.update_logic(message.from_user.id, '')
        result = api.call('/v1/request/callback/',
                          {'from': db.get_phone_number(message.from_user.id), 'to': message.data})
        if 'success' in result:
            await message.message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–æ–Ω–æ–∫!')
            await asyncio.sleep(90)
            start = datetime.datetime.now() - datetime.timedelta(minutes=1, seconds=30)
            statisctics = ast.literal_eval(
                api.call('/v1/statistics/', {'call_type': 'out', 'start': start.strftime('%Y-%m-%d %H:%M:%S')}))
            print(statisctics)
            for call in statisctics['stats']:
                if str(db.get_phone_number(message.from_user.id))[1:] in str(call['to'])[1:]:
                    if call['disposition'] == 'answered':
                        db.update_count_call(message.from_user.id, -1)
                        generate_user_stats(message.from_user.id, message.from_user.username)

                        await message.message.answer('–£—Å–ø–µ—à–Ω–æ!', reply_markup=keyboard_menu(message.from_user.id))
                        db.update_phone_number(message.from_user.id, '')
                        break
                    else:
                        db.update_phone_number(message.from_user.id, '')
                        await message.message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(errors[call['disposition']]),
                                                     reply_markup=keyboard_menu(
                                                         message.from_user.id))
                        break
        else:
            db.update_phone_number(message.from_user.id, '')
            await message.message.answer('–û—à–∏–±–∫–∞!–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=keyboard_menu(message.from_user.id))


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
